;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname |frogger (completed)|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)

;; Problem Set 7 (Hopper Game)
;; Group 14
;; George Abinader
;; Nilu Nixon

;; Data Definitions

;; A Player is a (make-player Number Number Direction)

(define-struct player (x y dir))

;; A Players Direction is one of:

;; - 'left

;; - 'right

;; - 'up'

;; - 'down

;; A Vehicle is a (make-vehicle Number Number Direction Symbol)

(define-struct vehicle (x y dir type))

;; A Vehicle Direction is one of:

;; - 'left

;; - 'right

;; A Vehicle Type is one of:

;; - 'truck

;; - 'plank

;; - 'turtle

;; A Set of Vehicles (VSet) is one of:

;; - empty

;; - (cons Vehicle VSet)

;; A World is a (make-world Player VSet)

;; The VSet represents the set of vehicles moving across the screen

(define-struct world (player vehicles))

;; A Frog is one of:

;; - FROGU

;; - FROGD

;; - FROGR

;; - FROGL

;; Problem 1

;; Constants

;;;;; SPEED OF TRAFFIC ;;;
(define TRAFFIC-SPEED 6) ;
;;;;;;;;;;;;;;;;;;;;;;;;;;

(define INITIAL-PLAYER (make-player 250 293.659 'up))
(define TRUCK (rectangle 30 15 "solid" "black"))
(define PLANK (rectangle 60 15 "outline" "brown"))
(define TURTLE (overlay/xy (ellipse 30 20 "outline" "green")
                           30 0
                           (ellipse 30 20 "outline" "green")))
(define FROGU (triangle 11.547 "solid" "green"))
(define FROGR (rotate 270 (triangle 11.547 "solid" "green")))
(define FROGL (rotate 90 (triangle 11.547 "solid" "green")))
(define FROGD (rotate 180 (triangle 11.547 "solid" "green")))
(define FROG-HEIGHT 10)
;;;; these functions are needed to define the VSet with build-list ;;;;
(define (build-l1 n)                                        
  (make-vehicle (+ 15 (* n 156)) 269.719 'left 'truck))     
(define (build-r1 n)                                        
  (make-vehicle (+ 15 (* n 156)) 245.779 'right 'truck))    
(define (build-l2 n)                                        
  (make-vehicle (+ 15 (* n 156)) 221.839 'left 'truck))     
(define (build-r2 n)                                        
  (make-vehicle (+ 15 (* n 156)) 197.889 'right 'truck))    
(define (build-l3 n)                                        
  (make-vehicle (+ 15 (* n 156)) 173.959 'left 'truck))     
(define (build-rr1 n)                                       
  (make-vehicle (+ 15 (* n 156)) 126.079 'right 'turtle))   
(define (build-rl1 n)                                       
  (make-vehicle (+ 15 (* n 156)) 102.139 'left 'plank))     
(define (build-rr2 n)                                       
  (make-vehicle (+ 15 (* n 156)) 78.199 'right 'plank))     
(define (build-rl2 n)                                       
  (make-vehicle (+ 15 (* n 156)) 54.259 'left 'turtle))     
(define (build-rr3 n)                                       
  (make-vehicle (+ 15 (* n 156)) 30.319 'right 'plank))     
(define VSET  
  (append (build-list 4 build-l1) (build-list 4 build-r1)
          (build-list 4 build-l2) (build-list 4 build-r2) 
          (build-list 4 build-l3) (build-list 4 build-rr1)
          (build-list 4 build-rl1) (build-list 4 build-rr2)
          (build-list 4 build-rl2) (build-list 4 build-rr3)))
;;;;                                                               ;;;;
(define STEP-LEFT 21)
(define STEP-RIGHT 21)
(define STEP-UP 23.94)
(define STEP-DOWN 23.94)
(define Y-PROXIMITY-FOR-COLLISION 2)
(define X-PROXIMITY-FOR-COLLISION 20)
(define TOP 23.95)
(define WORLD-WIDTH 500)
(define WORLD-HEIGHT 299.659)
(define HALF-WORLD-HEIGHT (/ WORLD-HEIGHT 2))
(define BG (empty-scene WORLD-WIDTH WORLD-HEIGHT))
(define BUMPER-TO-BUMPER 156)
(define TRUCK-WIDTH 30)
(define TURTLE-PLANK-WIDTH 60)

;; World -> Image
;; Runs the Hopper game

(define (hopper _unused)
  (big-bang (make-world INITIAL-PLAYER VSET)
            [to-draw render-game]
            [on-key move-player]
            [on-tick update-world]
            [stop-when game-over?]))

;; World Ke -> World
;; changes the dir of the player

(define (move-player w ke)
  (cond
    [(key=? "up" ke) 
     (move w - STEP-UP 'up)]
    [(and (key=? "down" ke) (> 293.659 (player-y (world-player w))))
     (move w + STEP-DOWN 'down)]
    [(and (key=? "left" ke) (< 19 (player-x (world-player w))))
     (move-side w - STEP-LEFT 'left)]
    [(and (key=? "right" ke) (> 481 (player-x (world-player w))))
     (move-side w + STEP-RIGHT 'right)]
    [else w]))

;; tests

(check-expect (move-player (make-world INITIAL-PLAYER empty) "up")
              (move (make-world INITIAL-PLAYER empty) - STEP-UP 'up))
(check-expect (move-player (make-world (make-player 250 270 'down) empty) "down")
              (move (make-world (make-player 250 270 'down) empty) + STEP-DOWN 'down))
(check-expect (move-player (make-world INITIAL-PLAYER empty) "left")
              (move-side (make-world INITIAL-PLAYER empty) - STEP-LEFT 'left))
(check-expect (move-player (make-world INITIAL-PLAYER empty) "right")
              (move-side (make-world INITIAL-PLAYER empty) + STEP-RIGHT 'right))              
(check-expect (move-player (make-world INITIAL-PLAYER empty) "r")
              (make-world INITIAL-PLAYER empty))

;; World [Number -> Number] Number Direction -> World
;; helper function for moving up or down

(define (move w fn c dir)
  (cond
    [(or (symbol=? 'up (player-dir (world-player w)))
         (symbol=? 'left (player-dir (world-player w)))
         (symbol=? 'right (player-dir (world-player w))))
     (make-world (make-player (player-x (world-player w))
                              (fn (player-y (world-player w)) c) dir) 
                 (world-vehicles w))]
    [(symbol=? 'down (player-dir (world-player w))) 
     (make-world (make-player (player-x (world-player w)) 
                              (fn (player-y (world-player w)) c) dir) 
                 (world-vehicles w))]))

;; tests

(check-expect (move (make-world INITIAL-PLAYER empty) + STEP-UP 'up)
              (make-world (make-player 250 317.599 'up) empty))
(check-expect (move (make-world (make-player 250 290 'left) empty) - STEP-DOWN 'down)
              (make-world (make-player 250 266.06 'down) empty))
(check-expect (move (make-world (make-player 250 290 'right) empty) - STEP-DOWN 'up)
              (make-world (make-player 250 266.06 'up) empty))
(check-expect (move (make-world (make-player 250 290 'down) empty) - STEP-DOWN 'up)
              (make-world (make-player 250 266.06 'up) empty))

;; World [Number -> Number] Direction -> World
;; helper function for moving left or right

(define (move-side w fn c dir)
  (make-world (make-player (fn  (player-x (world-player w)) c)
                           (player-y (world-player w)) dir) 
              (world-vehicles w)))

;; tests

(check-expect (move-side (make-world INITIAL-PLAYER empty) - STEP-LEFT 'left)
              (make-world (make-player 229 293.659 'left) empty))
(check-expect (move-side (make-world INITIAL-PLAYER empty) + STEP-RIGHT 'right)
              (make-world (make-player 271 293.659 'right) empty))

;; World -> World
;; Updates the world

(define (update-world w)
  (local (; World -> Player
          ; updates the player to move with the river
          (define (player-update w)
            (cond
              [(or (and (> (player-y (world-player w)) 126)
                        (< (player-y (world-player w)) 128))
                   (and (> (player-y (world-player w)) 77)
                        (< (player-y (world-player w)) 79))
                   (and (> (player-y (world-player w)) 29)
                        (< (player-y (world-player w)) 31)))
               (player-update-helper w +)]
              [(or (and (> (player-y (world-player w)) 101)
                        (< (player-y (world-player w)) 103))
                   (and (> (player-y (world-player w)) 53)
                        (< (player-y (world-player w)) 55)))
               (player-update-helper w -)]))
          (define (player-update-helper w fn)
            (make-player (fn (player-x (world-player w)) TRAFFIC-SPEED)
                         (player-y (world-player w)) (player-dir (world-player w)))))
    (if (<= (player-y (world-player w)) (- HALF-WORLD-HEIGHT (/ FROG-HEIGHT 2)))
        (make-world (player-update w) (map vehicle-update (world-vehicles w)))
        (make-world (world-player w) (map vehicle-update (world-vehicles w))))))

;; tests

(check-expect (update-world (make-world INITIAL-PLAYER VSET)) 
              (make-world INITIAL-PLAYER (map vehicle-update VSET)))
(check-expect (update-world (make-world (make-player 250 126.079 'up) VSET)) 
              (make-world (make-player (+ 250 TRAFFIC-SPEED) 126.079 'up)
                          (map vehicle-update VSET)))
(check-expect (update-world (make-world (make-player 250 102.139 'up) VSET)) 
              (make-world (make-player (- 250 TRAFFIC-SPEED) 102.139 'up)
                          (map vehicle-update VSET)))
(check-expect (update-world (make-world (make-player 250 78.199 'up) VSET)) 
              (make-world (make-player (+ 250 TRAFFIC-SPEED) 78.199 'up)
                          (map vehicle-update VSET)))
(check-expect (update-world (make-world (make-player 250 54.259 'up) VSET)) 
              (make-world (make-player (- 250 TRAFFIC-SPEED) 54.259 'up)
                          (map vehicle-update VSET)))
(check-expect (update-world (make-world (make-player 250 30.319 'up) VSET)) 
              (make-world (make-player (+ 250 TRAFFIC-SPEED) 30.319 'up)
                          (map vehicle-update VSET)))

;; Vehicle -> Vehicle
;; function to use with map to update the traffic's x-coordinates

(define (vehicle-update v)
  (local (; Vehicle -> Vehicle
          ; updates left-moving traffic
          (define (vehicle-update-l v)
            (make-vehicle (modulo (- (vehicle-x v) TRAFFIC-SPEED)
                                  (- (+ WORLD-WIDTH BUMPER-TO-BUMPER)
                                     (/ TRUCK-WIDTH 2))) 
                          (vehicle-y v) 'left (vehicle-type v)))
          ; Vehicle -> Vehicle
          ; updates right-moving traffic
          (define (vehicle-update-r v)
            (make-vehicle (modulo (+ (vehicle-x v) TRAFFIC-SPEED)
                                  (- (+ WORLD-WIDTH BUMPER-TO-BUMPER)
                                     (/ TRUCK-WIDTH 2))) 
                          (vehicle-y v) 'right (vehicle-type v))))
    (cond 
      [(symbol=? 'left (vehicle-dir v))
       (vehicle-update-l v)]
      [(symbol=? 'right (vehicle-dir v))
       (vehicle-update-r v)])))

;; tests

(check-expect (update-world 
               (make-world INITIAL-PLAYER (list (make-vehicle 6 0 'right 'turtle)
                                                (make-vehicle 6 0 'left 'truck)))) 
              (make-world INITIAL-PLAYER 
                          (list (make-vehicle (+ 6 TRAFFIC-SPEED) 0 'right 'turtle)
                                (make-vehicle (- 6 TRAFFIC-SPEED) 0 'left 'truck))))

;; World Vset -> Image
;; Renders the hopper game

(define (render-game w)
  (local
    (; World Frog -> Image
     ; places the correct frog on the scene
     (define (frog-render w frog)
       (place-image frog (player-x (world-player w)) 
                    (player-y (world-player w)) BG))
     ; World -> Frog
     ; outputs the correct frog based on the world
     (define (frog-dir w)
       (cond
         [(symbol=? 'left (player-dir (world-player w))) FROGL]
         [(symbol=? 'right (player-dir (world-player w))) FROGR]
         [(symbol=? 'up (player-dir (world-player w))) FROGU]
         [(symbol=? 'down (player-dir (world-player w))) FROGD]))
     ; World -> Image
     ; Draws the traffic
     (define (draw-vehicles w)
       (cond
         [(symbol=? 'truck (vehicle-type (first (world-vehicles w)))) (draw-truck w)]
         [(symbol=? 'plank (vehicle-type (first (world-vehicles w)))) (draw-plank w)]
         [(symbol=? 'turtle (vehicle-type (first (world-vehicles w)))) (draw-turtle w)]))
     ; World -> Image
     ; Draws a truck
     (define (draw-truck w)
       (place-image TRUCK (vehicle-x (first (world-vehicles w))) 
                    (vehicle-y (first (world-vehicles w)))
                    (render-game (make-world 
                                  (world-player w) 
                                  (rest (world-vehicles w))))))
     (define (draw-plank w)
       (place-image PLANK (vehicle-x (first (world-vehicles w)))
                    (vehicle-y (first (world-vehicles w)))
                    (render-game (make-world
                                  (world-player w)
                                  (rest (world-vehicles w))))))
     (define (draw-turtle w)
       (place-image TURTLE (vehicle-x (first (world-vehicles w)))
                    (vehicle-y (first (world-vehicles w)))
                    (render-game (make-world
                                  (world-player w)
                                  (rest (world-vehicles w)))))))
    
    (cond
      [(empty? (world-vehicles w))
       (frog-render w (frog-dir w))]
      [else (draw-vehicles w)])))

;; tests

(check-expect (render-game (make-world (make-player 0 0 'left) empty)) 
              (place-image FROGL 0 0 BG))
(check-expect (render-game (make-world (make-player 0 0 'right) empty)) 
              (place-image FROGR 0 0 BG))
(check-expect (render-game (make-world (make-player 0 0 'down) empty)) 
              (place-image FROGD 0 0 BG))
(check-expect (render-game (make-world (make-player 0 0 'up) empty)) 
              (place-image FROGU 0 0 BG))
(check-expect (render-game (make-world (make-player 0 0 'left) 
                                       (list (make-vehicle 0 0 'left 'truck)))) 
              (place-image TRUCK 0 0 (place-image FROGL 0 0 BG)))

;; World -> Boolean
;; Decides whether or not the game is over

(define (game-over? w)
  (or (< (player-y (world-player w)) TOP)
      (> (player-y (world-player w)) WORLD-HEIGHT)
      (> (player-x (world-player w)) WORLD-WIDTH)
      (< (player-x (world-player w)) 0)
      (if (>= (player-y (world-player w)) HALF-WORLD-HEIGHT)
          (vset-player-collision? (world-player w) (world-vehicles w))
          (not (vset-player-collision? (world-player w) (world-vehicles w))))))

;; tests

(check-expect (game-over? (make-world (make-player 150 5 'up) empty)) 
              true)
(check-expect (game-over? 
               (make-world (make-player 150 100 'up) 
                           (list (make-vehicle 150 100 'left 'plank)))) 
              false)

;; Player Vset -> Boolean
;; Detects a collision with the player and any vehicle in the Vset

(define (vset-player-collision? player vset)
  (local (; Player Vehicle -> Boolean
          ; detects a collision with a vehicle
          (define (vehicle-player-collision? player vehicle) 
            (and (<= (abs (- (player-y player) (vehicle-y vehicle))) 
                     Y-PROXIMITY-FOR-COLLISION)
                 (<= (abs (- (player-x player) (vehicle-x vehicle))) 
                     (if (> (- (player-y player) FROG-HEIGHT) 
                            HALF-WORLD-HEIGHT) X-PROXIMITY-FOR-COLLISION 
                                               (/ TURTLE-PLANK-WIDTH 2))))))
    (cond
      [(empty? vset) false]
      [else (or (vehicle-player-collision? player (first vset))
                (vset-player-collision? player (rest vset)))])))

;; tests

(check-expect (vset-player-collision? (make-player 50 300 'up)
                                      (list (make-vehicle 50 300 'left 'truck))) 
              true)
(check-expect (vset-player-collision? (make-player 100 100 'up) 
                                      (list (make-vehicle 25 25 'left 'truck))) 
              false)
(hopper 6)